package PartB;

public class PartB {
	

		public static void main(String[] args) throws InterruptedException{	
			// TODO Auto-generated method stub
			
			Data sample = new Data();
			
			int i;
			int test_size=100;
			for(i=0; i<test_size; i++) {
				System.out.println("Loop "+ i +"\n");
				
				boolean goFuncA1=false;
				boolean goFuncA2=false;
				boolean goFuncA3=false;
				boolean goFuncB1=false;
				boolean goFuncB2=false;
				boolean goFuncB3=false;
				
				
				
				ThreadA ta = new ThreadA(sample);
				ThreadB tb = new ThreadB(sample);
				ta.start();
				tb.start();
				ta.join();
				tb.join();


				System.out.println("\n");

			}
		}
	}
	class Data
	{
		int A1,A2,A3,B1,B2,B3;
		boolean goFuncA1=false;
		boolean goFuncA2=false;
		boolean goFuncA3=false;
		boolean goFuncB1=false;
		boolean goFuncB2=false;
		boolean goFuncB3=false;
		
	}
	class ThreadA extends Thread{
		private Data sample;

		public ThreadA(Data sample) {
		this.sample = sample;
	}

		public void run() {
		synchronized(sample) {
			int n = 500;
			sample.A1 = n*(n+1)/2;
			System.out.println("A1 = " + sample.A1);
			sample.goFuncB2 = true;
			sample.notify();
			sample.goFuncA1 = false;
			//print out the value of A1
		}
		
		synchronized(sample){
			while(sample.goFuncA2==false) {
				System.out.println("First run B2 to get to A2");
				try {
					sample.wait();
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
			}
		}
		synchronized(sample) {
			while(sample.goFuncA2==true) {
				int i = 300;
				sample.A2 = sample.B2+(i*(i+1))/2;
				System.out.println("A2 = " + sample.A2);
				sample.goFuncB3=true;
				sample.notify();
				sample.goFuncA2 = false;
				break;
			}
		}
		synchronized(sample) {
			while(sample.goFuncA3==false) {
				System.out.println("First run B3 to get A3");
				try {
					sample.wait();
				}
				catch (InterruptedException e) {
					e.printStackTrace();
				}
				
			}
			
		}
		synchronized(sample) {
			while(sample.goFuncA3==true) {
				int n = 400;
				sample.A3 = sample.B3+(n*(n+1))/2;
				System.out.println("A3 = " + sample.A3);
				sample.notify();
				sample.goFuncA3 = false;
				break;
			}
		}
	}
	}

	class ThreadB extends Thread{
		private Data my_sample;
		
		public ThreadB(Data my_sample){
			this.my_sample = my_sample;
		}
		public void run() {
			
			synchronized (my_sample) 
			{
				int n = 250;
				my_sample.B1 = n * (n+1) / 2; 
				System.out.println("B1 = " + my_sample.B1);
				my_sample.goFuncB1 = false;
				
			}

			
			
			synchronized (my_sample) {
				while (my_sample.goFuncB2==false) {
					System.out.println("First run A1 to get to B2");
					try {
						my_sample.wait();
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				
				
				
			}
			synchronized(my_sample) {
				while (my_sample.goFuncB2==true) {
					int z = 200;
					my_sample.B2 = my_sample.A1 + z*(z+1)/2;
					System.out.println("B2 = " + my_sample.B2);
					my_sample.goFuncA2=true;
					my_sample.notify();
					my_sample.goFuncB2 = false;
					break;
				}
				}
			synchronized(my_sample) {
				while(my_sample.goFuncB3 ==false) {
					System.out.println("First run A2 to get to B3");
					try {
						my_sample.wait();
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
			}
			synchronized(my_sample) {
				while(my_sample.goFuncB3 == true) {
					int y = 400;
					my_sample.B3 = my_sample.A2+ y*(y+1)/2;
					System.out.println("B3 = " + my_sample.B3);
					my_sample.goFuncA3=true;
					my_sample.notify();
					my_sample.goFuncB3 = false;
					break;
					
				}
			}
			}
		
		}


